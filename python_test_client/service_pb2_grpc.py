# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class RaptorQStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EncodeMetaData = channel.unary_unary(
                '/raptorq.RaptorQ/EncodeMetaData',
                request_serializer=service__pb2.EncodeMetaDataRequest.SerializeToString,
                response_deserializer=service__pb2.EncodeMetaDataReply.FromString,
                )
        self.Encode = channel.unary_unary(
                '/raptorq.RaptorQ/Encode',
                request_serializer=service__pb2.EncodeRequest.SerializeToString,
                response_deserializer=service__pb2.EncodeReply.FromString,
                )
        self.Decode = channel.unary_unary(
                '/raptorq.RaptorQ/Decode',
                request_serializer=service__pb2.DecodeRequest.SerializeToString,
                response_deserializer=service__pb2.DecodeReply.FromString,
                )


class RaptorQServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EncodeMetaData(self, request, context):
        """Get metadata including list of symbol ids and encoder parameter

        Performs encoding and stores the symbols in the SQLite database

        Input:
        EncodeMetaDataRequest
        path            - location of the input file
        files_number    - how many ID files to create, can be 0
        block_hash      - block_hash of the Registration ticket
        pastel_id       - PastelID used to sign the Registration ticket

        Output:
        EncodeMetaDataReply
        encoder_parameters  - Object Transmission Information (12 bytes array)
        path                - path to the SQLite database storing the symbols
        symbols_count       - number of symbols

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Encode(self, request, context):
        """Encode input data blob into symbols and store them in SQLite database

        Input:
        EncodeRequest
        path            - location of the input file

        Output:
        EncodeReply
        encoder_parameters - Object Transmission Information (12 bytes array)
        symbols_count      - number of created symbol files
        path               - path to the SQLite database storing the symbols

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Decode(self, request, context):
        """Decode symbols back into original data blob using SQLite database

        Input:
        DecodeRequest
        encoder_parameters  - Object Transmission Information (12 bytes array)
        path                - location of the SQLite database with symbols

        Output:
        DecodeReply
        path                - path to the restored original file

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaptorQServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EncodeMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodeMetaData,
                    request_deserializer=service__pb2.EncodeMetaDataRequest.FromString,
                    response_serializer=service__pb2.EncodeMetaDataReply.SerializeToString,
            ),
            'Encode': grpc.unary_unary_rpc_method_handler(
                    servicer.Encode,
                    request_deserializer=service__pb2.EncodeRequest.FromString,
                    response_serializer=service__pb2.EncodeReply.SerializeToString,
            ),
            'Decode': grpc.unary_unary_rpc_method_handler(
                    servicer.Decode,
                    request_deserializer=service__pb2.DecodeRequest.FromString,
                    response_serializer=service__pb2.DecodeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raptorq.RaptorQ', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RaptorQ(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EncodeMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raptorq.RaptorQ/EncodeMetaData',
            service__pb2.EncodeMetaDataRequest.SerializeToString,
            service__pb2.EncodeMetaDataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Encode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raptorq.RaptorQ/Encode',
            service__pb2.EncodeRequest.SerializeToString,
            service__pb2.EncodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Decode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raptorq.RaptorQ/Decode',
            service__pb2.DecodeRequest.SerializeToString,
            service__pb2.DecodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
